self.btn_Nuevo.clicked.connect(self.buscar_por_correo_actualizar)
        self.btn_Nuevo_3.clicked.connect(self.modificar_rol)


    def buscar_por_correo_actualizar(self):
        self.var_1 = str
        self.var_2 = str
        id_user = self.lineEdit_5.text()
        id_user = str("'"+id_user+"'")
        from windows import Conexion
        self.datos = Conexion.DataBase()
        self.correo = self.datos.buscar_usuarios(id_user)
        if len(self.correo) != 0:
            self.Id = self.correo[0][0]
            self.lineEdit.setText(self.correo[0][1])
            self.lineEdit_2.setText(self.correo[0][2])
            self.lineEdit_3.setText(self.correo[0][3])
            self.lineEdit_4.setText(self.correo[0][4])
            self.var_1 = (self.correo[0][5])
            self.var_2 = (self.correo[0][6])
        else:
            import tkinter
            from tkinter import messagebox
            error = tkinter.messagebox.showerror("No exite", "No existen estos datos")

    def modificar_rol(self):
        if self.correo != '':
            nombre = self.lineEdit.text()
            apellido = self.lineEdit_2.text()
            correo_electronico = self.lineEdit_3.text()
            rol = self.lineEdit_4.text()
            self.datos = Conexion.DataBase()
            print("pasa")
            self.act = self.datos.actualizar_usuario(self.Id, nombre, apellido, correo_electronico, rol, self.var_1, self.var_2)
            if self.act == 1:
                import tkinter
                from tkinter import messagebox
                hecho = tkinter.messagebox.showinfo("Actualzado", "Los datos fueron actualizados satisfactoriamente")
                print("xd")
            elif self.act == 0:
                print("error")
            else:
                import tkinter
                from tkinter import messagebox
                hecho = tkinter.messagebox.showinfo("Posiblemente hay un error", "Revise lo que esta buscando")
importar la librería necesaria para conectarte a MySQL

def sendMessage(self):
    # obtener el mensaje enviado por el usuario
    message = self.lineEdit.text()

    # conectarse a la base de datos MySQL
    conexión = conectar_a_mysql()

    # buscar la respuesta en la tabla de la base de datos
    respuesta = buscar_respuesta_en_base_de_datos(conexión, message)

    # si se encontró una respuesta, devolverla
    if respuesta is not None:
        # generar el widget para mostrar la respuesta
        recW = recWidget()
        recW.label_4.setText(respuesta)

        # agregar la respuesta al chat
        item = QListWidgetItem()
        item.setSizeHint(recW.sizeHint())
        self.listWidget.addItem(item)
        self.listWidget.setItemWidget(item, recW)
        self.listWidget.setMinimumWidth(recW.width())
    else:
        # si no se encontró una respuesta, devolver un mensaje de error
        print("No logro entender tu mensaje, por favor se presciso con lo que quieres decirme")
        recW = recWidget()
        recW.label_4.setText(text_temp2)

        # agregar la respuesta de error al chat
        item = QListWidgetItem()
        item.setSizeHint(recW.sizeHint())
        self.listWidget.addItem(item)
        self.listWidget.setItemWidget(item, recW)
        self.listWidget.setMinimumWidth(recW.width())

    # cerrar la conexión a la base de datos
    cerrar_

